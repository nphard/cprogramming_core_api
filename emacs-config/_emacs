;; .emacs
;; Save the back file in a fixed position
(setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup"))) 

;; add the extra package
(add-to-list 'load-path "~/.emacs.d/site-lisp")

(global-set-key "\C-m" 'set-mark-command)
(global-set-key (kbd "M-;") 'set-mark-command)
(global-set-key (kbd "C-x j") 'iswitchb-buffer-other-window) ; was digit-argument
(global-set-key (kbd "M-9") 'kill-buffer-and-window) ; was digit-argument
(global-set-key (kbd "M-4") 'split-window-vertically) ; was digit-argument
(global-set-key (kbd "M-3") 'delete-other-windows) ; was digit-argument
(global-set-key (kbd "M-s") 'other-window) ; was center-line

;;; uncomment this line to disable loading of "default.el" at startup
;; (setq inhibit-default-init t)

;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))

(setq eshell-buffer-shorthand t)

(tool-bar-mode nil)
;; enable visual feedback on selections
(setq transient-mark-mode t)

;; default to better frame titles
(setq frame-title-format
      (concat  "%b - emacs@" system-name))

(iswitchb-mode 1)

(setq column-number-mode t)


;; This is only for emacs21
;;(require 'un-define)
(set-language-environment 'utf-8)
(setq locale-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-clipboard-coding-system 'ctext)
(set-buffer-file-coding-system 'utf-8)



(require 'magit)

;; set for the terminal
(require 'multi-term)
(setq milti-term-program "/bin/bash") 
(global-set-key "\C-x." 'multi-term)
(global-set-key "\C-x," 'multi-term-dedicated-open)
(global-set-key"\C-xn" 'multi-term-next)
(global-set-key"\C-xp" 'multi-term-prev)
(setq multi-term-dedicated-select-after-open-p t)

(defun ash-term-hooks ()
(setq term-default-bg-color (face-background 'default))
(setq term-default-fg-color (face-foreground 'default)))
(add-hook 'term-mode-hook 'ash-term-hooks)

;; define the erlang environment
;(setq load-path (cons  "/usr/local/erl/lib/erlang/lib/tools-2.6.6.2/emacs"
;      load-path))
;(require 'erlang-start)

;(add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
;(add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

;(setq erlang-root-dir "/usr/local/erl")
;(add-to-list 'exec-path "/usr/local/erl/bin")
;(setq erlang-man-root-dir "/usr/local/lib/erlang/man")

;; Programming Development Settings
(defun my-c-mode-common-hook()
  (setq default-tab-width 4 indent-tabs-mode nil)
  (setq tab-width 4 indent-tabs-mode nil)
  (setq c-basic-offset 4)
  (setq hs-minor-mode t) 
  (setq abbrev-mode t))
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

(defun my-c++-de-hook()
  (setq default-tab-width 4 indent-tabs-mode nil)
  (setq tab-width 4 indent-tabs-mode nil)
  (setq c-basic-offset 4)
  (c-set-style "stroustrup"))
(add-hook 'c++-mode-hook 'my-c++-mode-hook)

;; add the extra package
(add-to-list 'load-path "~/.emacs.d/site-lisp")
(add-to-list 'load-path
                  "~/.emacs.d/yasnippet")
(require 'yasnippet) 
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet/snippets")

;; set the color theme
(require  'color-theme)
(color-theme-initialize)
(color-theme-hober)

;; add cmake support
; 
;Add cmake listfile names to the mode list.
(require 'cmake-mode)
(setq auto-mode-alist
	    (append
		    '(("CMakeLists\\.txt\\'" . cmake-mode))
			   '(("\\.cmake\\'" . cmake-mode))
			      auto-mode-alist))
(autoload 'cmake-mode "~/CMake/Docs/cmake-mode.el" t)

(defun cmake-rename-buffer
 ()
  "Renames a CMakeLists.txt buffer to cmake-<directory name>."
  (interactive)
  ;(print (concat "buffer-filename = " (buffer-file-name)))
  ;(print (concat "buffer-name     = " (buffer-name)))
  (when (and (buffer-file-name) (string-match "CMakeLists.txt" (buffer-name)))
      ;(setq file-name (file-name-nondirectory (buffer-file-name)))
      (setq parent-dir (file-name-nondirectory (directory-file-name (file-name-directory (buffer-file-name)))))
      ;(print (concat "parent-dir = " parent-dir))
      (setq new-buffer-name (concat "cmake-" parent-dir))
      ;(print (concat "new-buffer-name= " new-buffer-name))
      (rename-buffer new-buffer-name t)
      )
  )
(add-hook 'cmake-mode-hook (function cmake-rename-buffer))





;; set cscope 
(require 'xcscope)

;;set the cedet enviroment
(add-to-list 'load-path "~/.emacs.d/cedet-1.0pre7/common")
(require 'cedet)
(require 'semantic-ia)
 
;; Enable EDE (Project Management) features
;(global-ede-mode 1)
(semantic-load-enable-excessive-code-helpers)
(semantic-load-enable-semantic-debugging-helpers)
 
;; Enable SRecode (Template management) minor-mode.
(global-srecode-minor-mode 1)

;; The following sets the c and c++ header files
;; (setq semanticdb-project-roots (list (expand-file-name "/")))
(defconst cedet-user-include-dirs
  (list ".." "../core" "../event" "../http" "../mail" "../misc" "../os"
        "../.." "../../include" "../../inc" "../../common" "../../public"))
;; (defconst cedet-win32-include-dirs
;;   (list "C:/MinGW/include" 
;;         "C:/MinGW/include/c++/3.4.5"
;;         "C:/MinGW/include/c++/3.4.5/mingw32"
;;         "C:/MinGW/include/c++/3.4.5/backward" 
;;         "C:/MinGW/lib/gcc/mingw32/3.4.5/include"
;;         "C:/Program Files/Microsoft Visual Studio/VC98/MFC/Include"))
(require 'semantic-c nil 'noerror)
(let ((include-dirs cedet-user-include-dirs))
  (when (eq system-type 'windows-nt)
    (setq include-dirs (append include-dirs cedet-win32-include-dirs)))
  (mapc (lambda (dir)
          (semantic-add-system-include dir 'c++-mode)
          (semantic-add-system-include dir 'c-mode))
        include-dirs))

(global-set-key [f12] 'semantic-ia-fast-jump)
(define-key c-mode-base-map (kbd "M-n") 'semantic-ia-complete-symbol)

;; set the java development enviroment
(add-to-list 'load-path (expand-file-name "~/.emacs.d/elib"))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/jdee/lisp"))
(require 'jde)
(put 'dired-find-alternate-file 'disabled nil)

(set-cursor-color "green")
